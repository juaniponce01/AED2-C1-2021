1) 
Invariante de Representación:
    Rep: estr -> boolean
    (∀e: estr) Rep(e) ≡ true ⇐⇒ (1)∧(2)
        donde:
        (1) ≡ 0 ≤ e.incio ≤ longitud(e.elem) - 1 
        (2) ≡ 0 ≤ e.fin ≤ longitud(e.elem) - 1
        (3) ≡ (∀i: Nat)(fin < i < inicio ⇒L e.elem[i] = 0)
---
Función de abstracción:
    Abs: estr -> colaAcotada {Rep(e)}
    (∀e: estr) Abs(e) =obs ca: colaAcotada | (1)∧(2)
        donde: 
        (1) ≡ longitud(e.elem) = capacidad(ca)
        (2) ≡ obs₂(ca) = ...
---

2) 
Solución Informal:
	- el grado + 1 debe ser igual al long de coef 
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)
		donde: 
		(1)	≡	e.grado + 1 = tam(coef)
---
Función de abstracción:
	Abs:	estr	->	polinomio	{Rep(e)}
	(∀e: estr) Abs(e) =obs p: polinomio | (1)
		donde: 
		(1)	≡	(∀ n: nat)(∃ n₂: nat)(evaluar(p, n₁) = cuenta(e.grado, e.coef, n₁))
		
			donde:
			cuenta: nat × array[nat] × nat -> nat
			cuenta(g, c, n) ≡ if g = 0 then c[g] else (c[g] * n^g) + cuenta(g-1, c, n) fi
---

3)
Solución Informal:
	- long es el long de palabra
	- la palabra es palindromo
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)
		donde: 
		(1)	≡	e.long = long(e.palabra)
		(2) ≡ esPalindromo(e.palabra)
		
			donde:
			esPalindromo: secu(string) -> bool
			esPalindromo(s) ≡ if long(s) ≤ 1 then true else ult(e.palabra) = prim(e.palabra) ∧ esPalindromo(fin(com(s))) fi 
---
Función de abstracción:
	Abs:	estr	->	palindromo	{Rep(e)}
	(∀e: estr) Abs(e) =obs p: palindromo | (1)
		donde: 
		(1)	≡	ver(p) = e.palabra
---

4)a)
Solución Informal:
	- la altura es el max entre altura de izq y der
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)
		donde: 
		(1)	≡	e.altura = 1 + max(e.(izq.altura), e.(der.altura))
---
b)
Función de abstracción:
	Abs:	estr	->	ab(α)	{Rep(e)}
	(∀e: estr) Abs(e) =obs ab: ab(α) | (1)
		donde: 
		(1)	≡	nil?(ab) = esNula(e.izq, e.der)
		(2) ≡ raiz(ab) = e.raiz
		(3) ≡ izq(ab) = e.izq
		(4) ≡ der(ab) = e.der
		
			donde:
			esNula: puntero(estr) × puntero(estr) -> bool
			esNula(i, d) ≡ i = NULL ∧ d = NULL
---
c)
Función de abstracción:
	Abs:	estr	->	ab(α)	{Rep(e)}
	(∀e: estr) Abs(e) =obs ab: ab(α) | (1)
		donde: 
		(1)	≡	nil() = 
		(2) ≡ der(bin(a, z, b)) = e.der
		(3) ≡ izq(bin(a, z, b)) = e.izq		
		(4) ≡ raiz(bin(a, z, b)) = e.raiz
---

5)
Solución Informal:
	- atendidos y fila esta incluido en entraron
	- colados esta incluido en fila
	- no debe haber repetidos en fila
	- entraron  fila = Ø
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)∧(3)
		donde: 
		(1)	≡	(e.atendidos ∪ e.entraron) ⊂ entraron
		(2)	≡	(∀ p: persona)(p ∈ e.colados ⇒L p ∈ conjDeFila(e.fila))
		(3) ≡ vacía?(e.fila) ∨L noHayRepetidos(proximo(e.fila), desencolar(e.fila))
		
			donde:
			conjDeFila: cola(persona) -> conj(persona)
			conjDeFila(c) ≡ 
			if vacia?(c) then
				Ø
			else
				Ag(proximo(c), conjDeFila(desencolar(c)))
			fi
			
			noHayRepetidos: persona × cola(persona) -> bool
			noHayRepetidos(p, c) ≡ 
			if vacia?(c) then
				true
			else
				noEsta(p, c) ∧ noHayRepetidos(proximo(c), desencolar(c))
			fi
			
			noEsta: persona × cola(persona) -> bool
			noEsta(p, c) ≡ vacía?(c) ∨L (p ≠ proximo(c) ∧ noEsta(p, desencolar(c)))
---
Función de abstracción:
	Abs:	estr	->	fila	{Rep(e)}
	(∀e: estr) Abs(e) =obs f: fila | (1)∧(2)
		donde: 
		(1)	≡	(∀ p: persona)(p ∈ conjDeFila(e.fila) ⇒L esperando(p, f))
		(2)	≡	(∀ p: persona)(esperando(p, f) ∧  ⇒L posicionEnLaFila(p, e.fila) = posicion(p, f))
		(3) ≡ (∀ p: persona)(seColo?(p, f) ⇒L p ∈ e.colados)
		(4) ≡ (∀ p: persona)(entro?(p, f) ⇒L p ∈ e.entraron)
		(5) ≡ (∀ p: persona)(fueAtendido?(p, f) ⇒L p ∈ e.atendidos)
		
			donde:
			posicionEnLaFila: persona × cola(persona) -> nat
			posicionEnLaFila(p, c) ≡ if p = proximo(c) then 0 else 1 + posicionEnLaFila(p, desencolar(c)) fi
---

6) 
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---

7) 
Solución Informal:
	- alguno de los meses del array tiene que ser distinto de 0
	- array de horas no puede tener ni mas ni menos de 12 indices
	- claves de horasPorMes tinene que ser igual a todos los π1 de significados de detalle 
	- #conMasHoras ≤ #claves de horasPorMes
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	(∀ a: array[mes])(∃ n: nat)(a ∈ significados(e.horasPorMes) ∧L (definido?(a, n) ∧ n > 0))
		(2)	≡	(∀ a: array[mes])(a ∈ significados(e.horasPorMes) ⇒L tam(a) = 12)
		(3) ≡ (∀ p: proyecto)(p ∈ claves(e.horasPorMes) ⇒L (∃ t: tupla⟨proy, mes, horas⟩)(t ∈ significados(e.detalle) ∧L π₁(t) = p))
		(4) ≡ 
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---






Solución Informal:
	- array[mes] debe tener longitud 12 en cada proyecto 
	// - en el array solo haya un indice entre 1 y 12, ESTO NO HACE FALTA POR EL TAD MES ES UN ENTERO EN EL RANGO 1...12
	- todo proyecto en tupla debe pertenecer a claves de horasPorMes
	- conMasHoras ⊆ claves(horasPorMes)
	- si existe una actividad con un proyecto, ese mes y hora deben estar registrados en el array de horasPorMes
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)∧(3)∧(4)
		donde: 
		(1)	≡	(∀ a: array[mes])(a ∈ significados(e.horasPorMes) ⇒L tam(a) = 12)
		// (2) ≡ (∀ a: array[mes])(∀ n: nat)(a ∈ significados(e.horasPorMes) ∧ definido?(n, a) ⇒L 1 ≤ n ≤ 12)
		(2) ≡ (∀ t: tupla⟨proy, mes, horas⟩)(t ∈ significados(e.detalle) ⇒L def?(π₁(t), e.horasPorMes))
		(3) ≡ e.conMasHoras ⊆ claves(e.horasPorMes)
		(4) ≡ (∀ t: tupla⟨proy, mes, horas⟩)(t ∈ significados(e.detalle) ⇒L sumarHorasEnMes(obtener(π₁(t), e.horasPorMes), π₂(t), π₃(t)) = obtener(π₁(t), e.horasPorMes)[π₂(t)])
		
			donde:
			significados: dicc(clave, significado) -> conj(significado)
			significados(d) ≡ if Ø?(claves(d)) then Ø else Ag(obtener(dameUno(claves(d)), d), significados(borrar(dameUno(claves(d))), d)) fi
			
			sumarHorasEnMes: array[mes] × mes × horas -> nat
			sumarHorasEnMes(a, m, h) ≡ a[m]<-a[m]+h
---
Función de abstracción:
	Abs:	estr	->	planilla	{Rep(e)}
	(∀e: estr) Abs(e) =obs p: planilla | (1)∧(2)∧(3)∧(4)∧(5)
		donde: 
		(1)	≡	actividades(p) = claves(e.detalle)
		(2)	≡	proyectos(p) = claves(e.horasPorMes)
		(3) ≡ (∀ a: actividad)(a ∈ actividades(p) ⇒L proyecto(a, p) = π₁(obtener(a, e.detalle)))
		(4) ≡ (∀ a: actividad)(a ∈ actividades(p) ⇒L mes(a, p) = π₂(obtener(a, e.detalle)))
		(5) ≡ (∀ a: actividad)(a ∈ actividades(p) ⇒L horas(a, p) = π₃(obtener(a, e.detalle)))
---

8)
Solución Informal:
	- catPrioritarias ⊆ claves(tramitesxCat)
	- no hay repetidos en pendPrioritarios
	- no hay repetidos en tramites
	- claves(tramites) debe ser igual a pendientes
	- toda categoria en significados de tramites debe estar en claves(tramitesxCat)
	- todo conj(id) de tramitesxCat debe estar incluido en pendientes
	- pendPrioritarios debe estar incluido en pendientes
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)∧(3)∧(4)∧(5)∧(6)∧(7)
		donde: 
		(1)	≡	e.catPrioritarias ⊆ claves(e.tramitesxCat)
		(2)	≡	vacía?(e.pendPrioritarios) ∨L noHayRepetidos(prim(e.pendPrioritarios), fin(e.pendPrioritarios))
		(3) ≡ vacía?(e.pendientes) ∨L noHayRepetidos(prim(e.pendientes), fin(e.pendientes))
		(4) ≡ claves(e.tramites) = conjDeSecu(e.pendientes))
		(5) ≡ significados(e.tramites) = claves(e.tramitesxCat)
		(6) ≡ (∀ c: conj(id))(c ∈ significados(e.tramitesxCat) ⇒L c ⊆ claves(e.tramites))
		(7) ≡ conjDeSecu(e.pendPrioritarios) ⊆ conjDeSecu(e.pendientes)
		
			donde:
			conjDeSecu: secu(id) -> conj(id)
			conjDeSecu(s) ≡ if vacía?(s) then Ø else Ag(prim(s), conjDeSecu(fin(s))) fi 
			
			noHayRepetidos: id × secu(id) -> bool
			noHayRepetidos(id, s) ≡ 
			if vacia?(s) then
				true
			else
				¬está?(id, s) ∧ noHayRepetidos(prim(s), fin(s))
			fi
			
			significados: dicc(clave, significado) -> conj(significado)
			significados(d) ≡ if Ø?(claves(d)) then Ø else Ag(obtener(dameUno(claves(d)), d), significados(borrar(dameUno(claves(d))), d)) fi
			
			• = • : conj(α) × conj(α) -> bool
			c = d ≡ c ⊆ d ∧ d ⊆ c
---
Función de abstracción:
	Abs:	estr	->	oficina	{Rep(e)}
	(∀e: estr) Abs(e) =obs o: oficina | (1)∧(2)∧(3)∧(4)
		donde: 
		(1)	≡	categorias(o) = claves(e.tramitesxCat)
		(2)	≡	pendientes(o) = e.pendientes
		(3) ≡ prioritarias(o) = e.catPrioritarias
		(4) ≡ (∀ i: id)(i ∈ pendientes(o) ⇒L catTram(i, o) = obtener(i, e.tramites))
---

9) 
Solución Informal:
	- cada conj(alarma) de tuplas debe estar incluido en calves(alarmas)
	- lo mismo para sensores
	- cada sensor de conj(sensor) de e.alarmas debe cumplir que su medicion es mayor a su umbral
	- en cada sensor de conj(sensor) de e.alarmas debe encontrarse la alarma en conj(alarma) de e.sensores
	- Visceversa
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡ (∀ s: sensor)(∃ t: tupla)((def?(s, e.sensores) ∧ obtener(s, e.sensores) = t) ∧L π₁(t) ⊆ claves(e.alarmas))
		(2)	≡	(∀ a: alarma)(∃ cs: conj(sensor))((def?(a, e.alarmas) ∧ obtener(a, e.alarmas) = cs) ∧L cs ⊆ claves(e.sensores))
		(3) ≡ (∀ a: alarma)(∀ s: sensor)((def?(a, e.alarmas) ∧ s ∈ obtener(a, e.alarmas)) ⇒L π₂(obtener(s, e.sensores)) < π₃(obtener(s, e.sensores)))
		(4) ≡ (∀ s: sensor)(∀ a: alarma)((def?(s, e.sensores) ∧ a ∈ π₁(obtener(s, e.sensores))) ⇒L s ∈ obtener(a, e.alarmas))
		(5) ≡ (∀ a: alarma)(∀ s: sensor)((def?(a, e.alarmas) ∧ s ∈ obtener(a, e.alarmas)) ⇒L a ∈ π₁(obtener(s, e.sensores)))
---
Función de abstracción:
	Abs:	estr	->	planta	{Rep(e)}
	(∀e: estr) Abs(e) =obs pl: planta | (1)∧(2)∧(3)∧(4)∧(5)
		donde: 
		(1)	≡	(∀ a: alarma)(esAlarma(pl, a) ⇒L def?(a, e.alarmas))
		(2)	≡	(∀ s: sensor)(esSensor(pl, a) ⇒L def?(s, e.sensores))
		(3) ≡ (∀ a: alarma)(esAlarma(pl, a) ⇒L sensoresAlarma(pl, a) = obtener(a, e.alarmas))
		(4) ≡ (∀ s: sensor)(esSensor(pl, a) ⇒L umbral(pl, s) = π₂(obtener(s, e.sensores)))
		(5) ≡ (∀ s: sensor)(esSensor(pl, a) ⇒L medicion(pl, s) = π₃(obtener(s, e.sensores)))
---
