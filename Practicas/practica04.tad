1) 
Representación:
	multiconjunto se representa con lista_enlazada
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	lista_enlazada, iterador Bidireccional()
	Géneros:	multiconjunto
	
	Operaciones básicas:
		Insertar(in/out m: multiconj(nat), in n: nat)
		Pre ≡ {m =obs m₀}
		Post ≡ {m =obs agregarAdelante(m₀, n)}
		Complejidad: Θ(#(m))
		Descripción: Inserta un elemento al multiconjunto
		Aliasing: Se inserta por referencia no modificable
		---		
		borrar(in/out m: multiconj(nat), in n: nat)
		Pre ≡ {m =obs m₀}
		Post ≡ {m =obs borrar(m₀, n)}
		Complejidad: O(#(m))
		Descripción: Inserta un elemento al multiconjunto
		Aliasing: Se inserta por referencia no modificable
		---		
		cantRepetidos(in m: multiconj(nat)) -> res: nat
		Pre ≡ {true}
		Post ≡ {res =obs #(m)}
		Complejidad: Θ(#(m))
		Descripción: Inserta un elemento al multiconjunto
		Aliasing: Se inserta por referencia no modificable
		---		

2)
Representación:
	tipoDato se representa con estr donde 
		estr es tupla ⟨	arg₀:	nat,
						arg₁: 	puntero(nat) ⟩

Solución Informal:
	- e.arg₀ + 1 debe ser ...
	- si e.arg₁ ...
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TipoDato
	Géneros:		tipoDato
	
	Operaciones básicas:
		NuevaOp(in n: nat)	-> res: tipoDato
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---		
	Algoritmos del módulo:
		iNuevaOp(in n: nat) -> res: estr
			res ← ⟨0, 9⟩	// Ejemplo
		---
