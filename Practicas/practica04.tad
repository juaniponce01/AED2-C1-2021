1) 
Representación:
	multiconjunto se representa con lista_enlazada
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	lista_enlazada, iterador Bidireccional()
	Géneros:	multiconjunto
	
	Operaciones básicas:
		Insertar(in/out m: multiconj(nat), in n: nat)
		Pre ≡ {m =obs m₀}
		Post ≡ {m =obs agregarAdelante(m₀, n)}
		Complejidad: Θ(#(m))
		Descripción: Inserta un elemento al multiconjunto
		Aliasing: Se inserta por referencia no modificable
		---		
		borrar(in/out m: multiconj(nat), in n: nat)
		Pre ≡ {m =obs m₀}
		Post ≡ {m =obs borrar(m₀, n)}
		Complejidad: O(#(m))
		Descripción: Inserta un elemento al multiconjunto
		Aliasing: Se inserta por referencia no modificable
		---		
		cantRepetidos(in m: multiconj(nat)) -> res: nat
		Pre ≡ {true}
		Post ≡ {res =obs #(m)}
		Complejidad: Θ(#(m))
		Descripción: Inserta un elemento al multiconjunto
		Aliasing: Se inserta por referencia no modificable
		---		

2)
Representación:
	tipoDato se representa con estr donde 
		estr es tupla ⟨	arg₀:	nat,
						arg₁: 	puntero(nat) ⟩

Solución Informal:
	- e.arg₀ + 1 debe ser ...
	- si e.arg₁ ...
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TipoDato
	Géneros:		tipoDato
	
	Operaciones básicas:
		NuevaOp(in n: nat)	-> res: tipoDato
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---		
	Algoritmos del módulo:
		iNuevaOp(in n: nat) -> res: estr
			res ← ⟨0, 9⟩	// Ejemplo
		---

4) 
Representación:
	matrizInfBool se representa con estr donde 
		estr es tupla ⟨	
										matriz:	vector(vector(bool)),
										complemento: vector(vector(bool))
									⟩
Invariante de Representacion:

Interfaz:
	Algoritmos del módulo:
		icrear() -> res: matrizInfBool
			res.matriz ← vacio()
			res.complemento ← vacio()
		---
		iasignar(in f: nat, in c: nat, in b: bool, in/out m: matrizInfBool)
			if esVacio?(m.matriz) then
				for i ← 0, i < f, i++
					for j ← 0, j < c, j++
						if f = i && c = j then
							if definido?(m.matriz[i])
								m.matriz[i] ← agregar(m.matriz[i], j, b)
								m.complemento ← agregarAtras(m.complemento, true)
							else
								m.matriz ← agregarAtras(vacio(), false)
								m.matriz[i] ← agregar(m.matriz[i], j, b)
								m.complemento ← agregarAtras(vacio(), true)
								m.complemento[i] ← agregarAtras(m.complemento[i], j, true)
							end if
						else
							if definido?(m.matriz[i])
								m.matriz[i] ← agregar(m.matriz[i], j, false)
								m.complemento[i] ← agregarAtras(m.complemento[i], j, true)
							else
								m.matriz ← agregarAtras(vacio(), false)
								m.matriz[i] ← agregar(m.matriz[i], j, b)
								m.complemento[i] ← 
								m.complemento ← agregarAtras(m.complemento, true)
							end if
							m.matriz ← agregarAtras(m.matriz, false)
							m.complemento ← agregarAtras(m.complemento, true)
						end if
					end for 
				end for
---

5)
Representación:
	matrizInfinita se representa con estr donde 
		estr es tupla ⟨	matriz:	vector(vector(α)),
										conjNotNull: conjLineal(tupla(α, itCoordenada)),
										 ⟩
		donde: TAD coordenada es tupla(nat, nat)

Interfaz:
	Algoritmos del módulo:
	{pre: i, j deben estar en Rango}
		idefinir(in i: int, in j: int, in v: α, in/out m: matrizInfinita)
			m.conjNotNull ← Ag(⟨v, (i, j)⟩, m.conjNotNull) //O(n)
			m.matriz[i] ← agregar(m.matriz[i], j, v) //O(1)
		---	
		{pre: i, j deben estar en Rango}
		iobtener(in i: nat, in j: nat, in/out m: matrizInfinita) -> res: α
			itCor ← crearIt(m.conjNotNull) //O(1)
			while haySiguiente(itConj) && π₂(itCor) ≠ (i, j)
				avanzar(itCor) //O(n)
			end while
			if haySiguiente(itCor) then
				res ← π₁(itCor) //O(1)
			else
				res ← 0
			fi
			
		---
		isumarMatrices(in/out a: matrizInfinita, in b: matrizInfinita) 
			itCor ← crearIt(b.conjNotNull) //O(1)
			while haySiguiente(itCor) do //O(m)
				a.matriz[(π₂(itConj))₁] ← agregar(a.matriz[(π₂(itConj))₁], (π₂(itConj))₂, π₁(itConj))
				avanzar(itCor)
			end while 
---

9)
Representación:
	conjunto se representa con lista(nat) ⟩
Interfaz:
	Algoritmos del módulo:
		iAg(in n: nat, in/out c: conjunto)
			if n < prim(c) then
				agregarAdelante(c, n) //O(1)
			else if n > ult(c) then
				agregarAtras(c, n) //O(1)
			else
				itC ← crearIt(c)
				while haySiguiente(itC) then
					if n < itC then 
						agregarComoAnterior(itC, n)
					end if
					avanzar(itC)
				end while
			end if
			
		---
		i∩(in )
